Utilities
JavaScript Minifier
Online JavaScript Minifier Tool and Compressor, with Fast and Simple API Access
Input JavaScript
/*
 * Project:
 *                eSheep - Webpage
 *
 * Date:
 *                04.april 2018
 *
 * Author:
 *                Adriano Petrucci (http://esheep.petrucci.ch)
 *
 * Version:       0.9.2.2
 *
 * Introduction:
 *                As "wrapper" for the OpenSource C# project
 *                (see https://github.com/Adrianotiger/desktopPet),
 *                this javascript "class" was written to get the animations also inside your
 *                webpage. It doesn't work like the Windows version, but show much animations from it.
 *
 * Description:
 *                Add a walking pet (sheep to your home page) with just a few lines of code!
 *                Will add a lovely sheep (stray sheep) and this will walk around your page and over
 *                all <hr>s and <div>s with a border. You can also select another animation, using your
 *                personal XML file or one from the database.
 *
 * How to use:
 *                Add this line in your <header>:
 *                <script src="https://adrianotiger.github.io/web-esheep/src/esheep.js"></script>
 *                Add this lines in your <body> (at the end if possible):
 *                <script>
                    var pet = new eSheep();
                    pet.Start();
                  </script>
 *                That's all!
 *
 * Requirement:
 *                Tested on IE11, Edge and Opera
 *
 * Changelog:
 *                Version 0.9.2 - 30.08.2021:
 *                  - Use local ressource
 *                  - Add all pets from PC repositories
 *                Version 0.9.2 - 30.08.2021:
 *                  - crispy stylesheet (pixel image and not antialiased)
 *                Version 0.9.0 - 11.07.2019:
 *                  - Updated animation link to the main project animation
 *                  - Recompiled with new Yarn version (security vulnerability)
 *                Version 0.8.0 - 29.05.2018:
 *                  - Moved animation files to github
 *                  - Added options to the script 
 *                  - Load an animation from the GitHub animations from the popup window
 *                Version 0.7.1 - 04.04.2018:
 *                  - Add max-width: none to ensure the image is properly shown
 *                Version 0.7 - 13.11.2017:
 *                  - better Javascript structure
 *                  - GitHub version (https://github.com/Adrianotiger/web-esheep)
 *                  - Childs animations added
 *                  - Better comments
 *                  - Replaced alerts with console.error
 *                Version 0.5 - 12.07.2017:
 *                  - animations starts only once the image was loaded (thanks RedSparr0w)
 *                Version 0.x:
 *                  - still beta versions...
 */

const VERSION = '0.9.2.2';              // web eSheep version
const ACTIVATE_DEBUG = false;         // show log on console
var script_url = document.currentScript.getAttribute('src');
const ROOT_SITE = window.location['origin']+script_url.substring(0,script_url.lastIndexOf('/')+1)+"..";
const DEFAULT_XML = ROOT_SITE+"/pets/esheep64/animations.xml"; // default XML animation
const DEFAULT_JSON = ROOT_SITE+"/pets/pets.json"; // default pets list
const ANIMATION_LIST = [
  'bbunny',
  'blue_sheep',
  'esheep64',
  'fox',
  'green_sheep',
  'gsheep-green',
  'mimiko',
  'negima',
  'neko',
  'orange_sheep',
  'pingus',
  'pink_sheep',
  'purple_sheep',
  'red_sheep',
  'ssj-goku',
  'yellow_sheep'
];
const COLLISION_WITH = ["div", "hr"]; // elements on page to detect for collisions

  /*
   * eSheep class.
   * Create a new class of this type if you want a new pet. Will create the components for the pet.
   * Once created, you can call [variableName].Start() to start the animation with your desired pet.
   */
class eSheep
{  
    /* Parameters for options [default]:
     * - allowPets: [none], all
     * - allowPopup: [yes], no
     */
  constructor(options, isChild)
  {
    this.userOptions = options ? options : {allowPets : "none", allowPopup : "yes"};
    if(!this.userOptions.allowPopup) this.userOptions.allowPopup = "yes";
    if(!this.userOptions.allowPets) this.userOptions.allowPets = "none";
        
      // CORS: Cross calls are not accepted by new browsers.
    this.animationFile = DEFAULT_XML;

    this.id = Date.now() + Math.random();

    this.DOMdiv = document.createElement("div");    // Div added to webpage, containing the sheep
    this.DOMdiv.setAttribute("id", this.id);
    this.DOMimg = document.createElement("img");    // Tile image, will be positioned inside the div
    this.DOMinfo = document.createElement("div");   // about dialog, if you press on the sheep

    this.parser = new DOMParser();                  // XML parser
    this.xmlDoc = null;                             // parsed XML Document
    this.prepareToDie = false;                      // when removed, animations should be stopped

    this.isChild = (isChild != null);               // Child will be removed once they reached the end

    this.tilesX = 1;                                // Quantity of images inside Tile
    this.tilesY = 1;                                // Quantity of images inside Tile
    this.imageW = 1;                                // Width of the sprite image
    this.imageH = 1;                                // Height of the sprite image
    this.imageX = 1;                                // Position of sprite inside webpage
    this.imageY = 1;                                // Position of sprite inside webpage
    this.flipped = false;                           // if sprite is flipped
    this.dragging = false;                          // if user is dragging the sheep
    this.infobox = false;                           // if infobox is visible
    this.animationId = 0;                           // current animation ID
    this.animationStep = 0;                         // current animation step
    this.animationNode = null;                      // current animation DOM node
    this.sprite = new Image();                      // sprite image (Tiles)
    this.HTMLelement = null;                        // the HTML element where the pet is walking on
    this.randS = Math.random() * 100;               // random value, will change when page is reloaded

    this.screenW = window.innerWidth
                  || document.documentElement.clientWidth
                  || document.body.clientWidth;     // window width

    this.screenH = window.innerHeight
                  || document.documentElement.clientHeight
                  || document.body.clientHeight;    // window height
  }

    /*
     * Start new animation on the page.
     * if animation is not set, the default sheep will be taken
     */
  Start(animation)
  {
    if(typeof animation !== 'undefined' &&
      animation != null)
    {
      var url_found = false;
      if('random'==animation) {
        var randomNumber = Math.floor(Math.random()*ANIMATION_LIST.length);
        animation=ANIMATION_LIST[randomNumber];
      }else{
        var url_list = ['https://', 'http://', 'ftp://'];
        for (var i = 0; i < url_list.length; i++) {
          if (animation.indexOf(url_list[i]) == 0) {
            url_found = true;
            break;
          }
        }
      }
      if(url_found===false){ //short animation name
        this.animationFile= ROOT_SITE+"/pets/"+animation+'/animations.xml';
      }else{ //full animation name
        this.animationFile = animation;
      }
    }

    var ajax = new XMLHttpRequest();
    var sheepClass = this;

    ajax.open("GET", this.animationFile, true);
    ajax.addEventListener("readystatechange", function() {
      if(this.readyState == 4)
      {
        if(this.status == 200)
            // successfully loaded XML, parse it and create first esheep.
          sheepClass._parseXML(this.responseText);
        else
          console.error("XXXXXML not available:" + this.statusText + "\n" + this.responseText);
      }
    });
    ajax.send(null);
  }

  remove() {
    this.prepareToDie = true;
    this.DOMinfo.Hide();
    setTimeout(()=>{
      this.DOMdiv = this.DOMimg = this.DOMinfo = null;
      document.getElementById(this.id).outerHTML='';
    }, 500);
  }

    /*
     * Parse loaded XML, contains spawn, animations and childs
     */
  _parseXML(text)
  {
    this.xmlDoc = this.parser.parseFromString(text,'text/xml');
    var image = this.xmlDoc.getElementsByTagName('image')[0];
    this.tilesX = image.getElementsByTagName("tilesx")[0].textContent;
    this.tilesY = image.getElementsByTagName("tilesy")[0].textContent;
      // Event listener: Sprite was loaded =>
      //   play animation only when the sprite is loaded
    this.sprite.addEventListener("load", () =>
    {
      if(ACTIVATE_DEBUG) console.log("Sprite image loaded");
      var attribute =
      "width:" + (this.sprite.width) + "px;" +
      "height:" + (this.sprite.height) + "px;" +
      "position:absolute;" +
      "top:0px;" +
      "left:0px;" +
      "max-width: none;";
      this.DOMimg.setAttribute("style", attribute);
        // prevent to move image (will show the entire sprite sheet if not catched)
      this.DOMimg.addEventListener("dragstart", e => {e.preventDefault(); return false;});
      this.imageW = this.sprite.width / this.tilesX;
      this.imageH = this.sprite.height / this.tilesY;
      attribute =
        "width:" + (this.imageW) + "px;" +
        "height:" + (this.imageH) + "px;" +
        "position:fixed;" +
        "top:" + (this.imageY) + "px;" +
        "left:" + (this.imageX) + "px;" +
        "transform:rotatey(0deg);" +
        "cursor:move;" +
        "z-index:2000;" +
        "overflow:hidden;" +
        "image-rendering: crisp-edges;";
      this.DOMdiv.setAttribute("style", attribute);
      this.DOMdiv.appendChild(this.DOMimg);

      if(this.isChild)
        this._spawnChild();
      else
        this._spawnESheep();
    });


    this.sprite.src = 'data:image/png;base64,' + image.getElementsByTagName("png")[0].textContent;
    this.DOMimg.setAttribute("src", this.sprite.src);

    // Mouse move over eSheep, check if eSheep should be moved over the screen
    this.DOMdiv.addEventListener("mousemove", e => 
    {
      if(!this.dragging && e.buttons==1 && e.button==0)
      {
        this.dragging = true;
        this.HTMLelement = null;
        var childsRoot = this.xmlDoc.getElementsByTagName('animations')[0];
        var childs = childsRoot.getElementsByTagName('animation');
        for(var k=0;k<childs.length;k++)
        {
          if(childs[k].getElementsByTagName('name')[0].textContent == "drag")
          {
            this.animationId = childs[k].getAttribute("id");
            this.animationStep = 0;
            this.animationNode = childs[k];
            break;
          }
        }
      }
    });
    // Add event listener to body, if mouse moved too fast over the dragging eSheep
    document.body.addEventListener("mousemove", e => 
    {
      if(this.dragging)
      {
        this.imageX = parseInt(e.clientX) - this.imageW/2;
        this.imageY = parseInt(e.clientY) - this.imageH/2;

        this.DOMdiv.style.left = this.imageX + "px";
        this.DOMdiv.style.top = this.imageY + "px";
        this.DOMinfo.style.left = parseInt(this.imageX + this.imageW/2) + "px";
        this.DOMinfo.style.top = this.imageY + "px";
      }
    });
    // Window resized, recalculate eSheep bounds
    document.body.addEventListener("resize", () => 
    {
      this.screenW = window.innerWidth
                || document.documentElement.clientWidth
                || document.body.clientWidth;

      this.screenH = window.innerHeight
                || document.documentElement.clientHeight
                || document.body.clientHeight;

      if(this.imageY + this.imageH > this.screenH)
      {
        this.imageY = this.screenH - this.imageH;
        this.DOMdiv.style.top = this.imageY + "px";
      }
      if(this.imageX + this.imageW > this.screenW)
      {
        this.imageX = this.screenW - this.imageW;
        this.DOMdiv.style.left = this.imageX + "px";
      }
    });
    // Don't allow contextmenu over the sheep
    this.DOMdiv.addEventListener("contextmenu", e => {
      e.preventDefault();
      return false;
    });
    // Mouse released
    this.DOMdiv.addEventListener("mouseup", e => {
      if(this.dragging)
      {
        this.dragging = false;
      }
      else if(this.infobox)
      {
        this.DOMinfo.Hide();
        this.infobox = false;
      }
      else
      {
        if(this.userOptions.allowPopup === "yes")
        {
          this.DOMinfo.style.left = Math.min(this.screenW-this.imageW, Math.max(this.imageW, parseInt(this.imageX + this.imageW/2))) + "px";
          this.DOMinfo.style.top = parseInt(this.imageY) + "px";
          this.DOMinfo.Show();
          this.infobox = true;
        }
      }
    });
    // Mouse released over the info box
    this.DOMinfo.addEventListener("mouseup", e => {
      this.DOMinfo.Hide();
      this.infobox = false;
    });
      // Create About box
    var attribute =
      "width:200px;" +
      "height:100px;" +
      "transform:translate(-50%, -50%) scale(0.1);" +
      "position:fixed;" +
      "top:100px;left:10px;" +
      "display:none;" +
      "border-width:2px;" +
      "border-radius:5px;" +
      "border-style:ridge;" +
      "border-color:#0000ab;" +
      "text-align:center;" +
      "text-shadow: 1px 1px 3px #ffff88;" +
      "box-shadow: 3px 3px 10px #888888;" +
      "color:black;" +
      "opacity:0.9;" +
      "z-index:9999;" +
      "overflow:auto;" +
      "transition:transform 0.3s ease;" +
      "background: linear-gradient(to bottom right, rgba(128,128,255,0.7), rgba(200,200,255,0.4));";
    this.DOMinfo.setAttribute("style",attribute);
    var headerNode = this.xmlDoc.getElementsByTagName('header')[0];
    var htmlT = document.createElement("b").appendChild(document.createTextNode(headerNode.getElementsByTagName('title')[0].textContent));
    var htmlV = document.createElement("sup");
    var htmlL = document.createElement("a");
    var htmlP = document.createElement("p");
    htmlV.appendChild(document.createTextNode("App v." + VERSION));
    htmlV.appendChild(document.createElement("br"));
    htmlV.appendChild(document.createTextNode("Pet v." + headerNode.getElementsByTagName('version')[0].textContent));
    htmlV.setAttribute("style", "float:right;text-align:right;");
    htmlL.appendChild(document.createTextNode("\u{1F3E0}"));
    htmlL.setAttribute("href", "https://github.com/Adrianotiger/web-esheep");
    htmlL.setAttribute("target", "_blank");
    htmlL.setAttribute("style", "float:left");
    htmlP.appendChild(document.createTextNode(headerNode.getElementsByTagName('info')[0].textContent));
    htmlP.setAttribute("style", "font-size:" + (100 - parseInt(headerNode.getElementsByTagName('info')[0].textContent.length / 10)) + "%;");
    this.DOMinfo.appendChild(htmlV);
    this.DOMinfo.appendChild(htmlL);
    if(this.userOptions.allowPets !== "none")
    {
      htmlL = document.createElement("a");
      htmlL.appendChild(document.createTextNode("\u{2699}"));
      htmlL.setAttribute("href", "javascript:;");
      htmlL.setAttribute("style", "float:left");
      this.DOMinfo.appendChild(htmlL);
      setTimeout(()=>{this._loadPetList(htmlL);},100);
    }
    this.DOMinfo.appendChild(htmlT);
    this.DOMinfo.appendChild(document.createElement("br"));
    this.DOMinfo.appendChild(document.createElement("hr"));
    this.DOMinfo.appendChild(htmlP);
      // Add about and sheep elements to the body
    document.body.appendChild(this.DOMinfo);
    document.body.appendChild(this.DOMdiv);
        
    this.DOMinfo.Show = () => {
      this.DOMinfo.style.display = "block";
      this.DOMinfo.style.transform = "translate(-50%, -100%) scale(1.0)";
    }
    this.DOMinfo.Hide = () => {
      this.DOMinfo.style.transform = "translate(-50%, -50%) scale(0.1)";
      setTimeout(()=>{this.DOMinfo.style.display = "none";}, 300);
    }
  };

    /*
     * Set new position for the pet
     * If absolute is true, the x and y coordinates are used as absolute values.
     * If false, x and y are added to the current position
     */
  _setPosition(x, y, absolute)
  {
    if (this.DOMdiv) {
      if(absolute)
      {
        this.imageX = parseInt(x);
        this.imageY = parseInt(y);
      }
      else
      {
        this.imageX = parseInt(this.imageX) + parseInt(x);
        this.imageY = parseInt(this.imageY) + parseInt(y);
      }
      this.DOMdiv.style.left = this.imageX + "px";
      this.DOMdiv.style.top = this.imageY + "px";
    }
  }

    /*
     * Spawn new esheep, this is called if the XML was loaded successfully
     */
  _spawnESheep()
  {
    var spawnsRoot = this.xmlDoc.getElementsByTagName('spawns')[0];
    var spawns = spawnsRoot.getElementsByTagName('spawn');
    var prob = 0;
    for(var i=0;i<spawns.length;i++)
      prob += parseInt(spawns[0].getAttribute("probability"));
    var rand = Math.random() * prob;
    prob = 0;
    for(i=0;i<spawns.length;i++)
    {
      prob += parseInt(spawns[i].getAttribute("probability"));
      if(prob >= rand || i == spawns.length-1)
      {
        this._setPosition(
          this._parseKeyWords(spawns[i].getElementsByTagName('x')[0].textContent),
          this._parseKeyWords(spawns[i].getElementsByTagName('y')[0].textContent),
          true
        );
        if(ACTIVATE_DEBUG) console.log("Spawn: " + this.imageX + ", " + this.imageY);
        this.animationId = spawns[i].getElementsByTagName('next')[0].textContent;
        this.animationStep = 0;
        var childsRoot = this.xmlDoc.getElementsByTagName('animations')[0];
        var childs = childsRoot.getElementsByTagName('animation');
        for(var k=0;k<childs.length;k++)
        {
          if(childs[k].getAttribute("id") == this.animationId)
          {
            this.animationNode = childs[k];

              // Check if child should be loaded toghether with this animation
            var childsRoot = this.xmlDoc.getElementsByTagName('childs')[0];
            var childs = childsRoot.getElementsByTagName('child');
            for(var j=0;j<childs.length;j++)
            {
              if(childs[j].getAttribute("animationid") == this.animationId)
              {
                if(ACTIVATE_DEBUG) console.log("Child from Spawn");
                var eSheepChild = new eSheep(null, true);
                eSheepChild.animationId = childs[j].getElementsByTagName('next')[0].textContent;
                var x = childs[j].getElementsByTagName('x')[0].textContent;//
                var y = childs[j].getElementsByTagName('y')[0].textContent;
                eSheepChild._setPosition(this._parseKeyWords(x), this._parseKeyWords(y), true);
                // Start animation
                eSheepChild.Start(this.animationFile);
                break;
              }
            }
            break;
          }
        }
        break;
      }
    }
      // Play next step
    this._nextESheepStep();
  }

    /*
     * Like spawnESheep, but for Childs
     */
  _spawnChild()
  {
    var childsRoot = this.xmlDoc.getElementsByTagName('animations')[0];
    var childs = childsRoot.getElementsByTagName('animation');
    for(var k=0;k<childs.length;k++)
    {
      if(childs[k].getAttribute("id") == this.animationId)
      {
        this.animationNode = childs[k];
        break;
      }
    }
    this._nextESheepStep();
  }

    // Parse the human readable expression from XML to a computer readable expression
  _parseKeyWords(value)
  {
    value = value.replace(/screenW/g, this.screenW);
    value = value.replace(/screenH/g, this.screenH);
    value = value.replace(/areaW/g, this.screenH);
    value = value.replace(/areaH/g, this.screenH);
    value = value.replace(/imageW/g, this.imageW);
    value = value.replace(/imageH/g, this.imageH);
    value = value.replace(/random/g, Math.random()*100);
    value = value.replace(/randS/g, this.randS);
    value = value.replace(/imageX/g, this.imageX);
    value = value.replace(/imageY/g, this.imageY);

    var ret = 0;
    try
    {
      ret = eval(value);
    }
    catch(err)
    {
      console.error("Unable to parse this position: \n'" + value + "'\n Error message: \n" + err.message);
    }
    return ret;
  }

    /*
     * Once the animation is over, get the next animation to play
     */
  _getNextRandomNode(parentNode)
  {
    var baseNode = parentNode.getElementsByTagName('next');
    var childsRoot = this.xmlDoc.getElementsByTagName('animations')[0];
    var childs = childsRoot.getElementsByTagName('animation');
    var prob = 0;
    var nodeFound = false;

      // no more animations (it was the last one)
    if(baseNode.length == 0)
    {
        // If it is a child, remove the child from document
      if(this.isChild)
      {
        // remove child
        if(ACTIVATE_DEBUG) console.log("Remove child");
        document.body.removeChild(this.DOMinfo);
        document.body.removeChild(this.DOMdiv);
        delete this;
      }
        // else, spawn sheep again
      else
      {
        this._spawnESheep();
      }
      return false;
    }

    for(var k=0;k<baseNode.length;k++)
    {
      prob += parseInt(baseNode[k].getAttribute("probability"));
    }
    var rand = Math.random() * prob;
    var index = 0;
    prob = 0;
    for(k=0;k<baseNode.length;k++)
    {
      prob += parseInt(baseNode[k].getAttribute("probability"));
      if(prob >= rand)
      {
        index = k;
        break;
      }
    }
    for(k=0;k<childs.length;k++)
    {
      if(childs[k].getAttribute("id") == baseNode[index].textContent)
      {
        this.animationId = childs[k].getAttribute("id");
        this.animationStep = 0;
        this.animationNode = childs[k];
        nodeFound = true;
        break;
      }
    }

    if(nodeFound) // create Child, if present
    {
      var childsRoot = this.xmlDoc.getElementsByTagName('childs')[0];
      var childs = childsRoot.getElementsByTagName('child');
      for(k=0;k<childs.length;k++)
      {
        if(childs[k].getAttribute("animationid") == this.animationId)
        {
          if(ACTIVATE_DEBUG) console.log("Child from Animation");
          var eSheepChild = new eSheep(null, true);
          eSheepChild.animationId = childs[k].getElementsByTagName('next')[0].textContent;
          var x = childs[k].getElementsByTagName('x')[0].textContent;//
          var y = childs[k].getElementsByTagName('y')[0].textContent;
          eSheepChild._setPosition(this._parseKeyWords(x), this._parseKeyWords(y), true);
          eSheepChild.Start(this.animationFile);
          break;
        }
      }
    }

    return nodeFound;
  }

    /*
     * Check if sheep is walking over a defined HTML TAG-element
     */
  _checkOverlapping()
  {
    var x = this.imageX;
    var y = this.imageY + this.imageH;
    var rect;
    var margin = 20;
    if(this.HTMLelement) margin = 5;
    for(var index in COLLISION_WITH)
    {
      var els = document.body.getElementsByTagName(COLLISION_WITH[index]);

      for(var i=0;i<els.length;i++)
      {
        rect = els[i].getBoundingClientRect();

        if(y > rect.top - 2 && y < rect.top + margin)
        {
          if(x > rect.left && x < rect.right - this.imageW)
          {
            var style = window.getComputedStyle(els[i]);
            if((style.borderTopStyle != "" && style.borderTopStyle != "none") && style.display != "none")
            {
              return els[i];
            }
          }
        }
      }
    }
    return false;
  }

    /*
     * Try to get the value of a node (from the current animationNode), if it is not possible returns the defaultValue
     */
  _getNodeValue(nodeName, valueName, defaultValue)
  {
    if(!this.animationNode || !this.animationNode.getElementsByTagName(nodeName)) return;
    if(this.animationNode.getElementsByTagName(nodeName)[0].getElementsByTagName(valueName)[0])
    {
      var value = this.animationNode.getElementsByTagName(nodeName)[0].getElementsByTagName(valueName)[0].textContent;

      return this._parseKeyWords(value);
    }
    else
    {
      return defaultValue;
    }
  }

    /*
     * Next step (each frame is a step)
     */
  _nextESheepStep()
  {
    if(this.prepareToDie) return;
    
    var x1 = this._getNodeValue('start','x',0);
    var y1 = this._getNodeValue('start','y',0);
    var off1 = this._getNodeValue('start','offsety',0);
    var opa1 = this._getNodeValue('start','opacity',1);
    var del1 = this._getNodeValue('start','interval',1000);
    var x2 = this._getNodeValue('end','x',0);
    var y2 = this._getNodeValue('end','y',0);
    var off2 = this._getNodeValue('end','offsety',0);
    var opa2 = this._getNodeValue('end','interval',1);
    var del2 = this._getNodeValue('end','interval',1000);

    var repeat = this._parseKeyWords(this.animationNode.getElementsByTagName('sequence')[0].getAttribute('repeat'));
    var repeatfrom = this.animationNode.getElementsByTagName('sequence')[0].getAttribute('repeatfrom');
    var gravity = this.animationNode.getElementsByTagName('gravity');
    var border = this.animationNode.getElementsByTagName('border');

    var steps = this.animationNode.getElementsByTagName('frame').length +
                (this.animationNode.getElementsByTagName('frame').length - repeatfrom) * repeat;

    var index;

    if(this.animationStep < this.animationNode.getElementsByTagName('frame').length)
      index = this.animationNode.getElementsByTagName('frame')[this.animationStep].textContent;
    else if(repeatfrom == 0)
      index = this.animationNode.getElementsByTagName('frame')[this.animationStep % this.animationNode.getElementsByTagName('frame').length].textContent;
    else
      index = this.animationNode.getElementsByTagName('frame')[parseInt(repeatfrom) + parseInt((this.animationStep - repeatfrom) % (this.animationNode.getElementsByTagName('frame').length - repeatfrom))].textContent;

    this.DOMimg.style.left = (- this.imageW * (index % this.tilesX)) + "px";
    this.DOMimg.style.top = (- this.imageH * parseInt(index / this.tilesX)) + "px";

    if(this.dragging || this.infobox)
    {
      this.animationStep++;
      setTimeout(this._nextESheepStep.bind(this), 50);
      return;
    }

    if(this.flipped)
    {
      x1 = -x1;
      x2 = -x2;
    }

    if(this.animationStep == 0)
      this._setPosition(x1, y1, false);
    else
      this._setPosition(
                          parseInt(x1) + parseInt((x2-x1)*this.animationStep/steps),
                          parseInt(y1) + parseInt((y2-y1)*this.animationStep/steps),
                          false);

    this.animationStep++;

    if(this.animationStep >= steps)
    {
      if(this.animationNode.getElementsByTagName('action')[0])
      {
        switch(this.animationNode.getElementsByTagName('action')[0].textContent)
        {
          case "flip":
            if(this.DOMdiv.style.transform == "rotateY(0deg)")
            {
              this.DOMdiv.style.transform = "rotateY(180deg)";
              this.flipped = true;
            }
            else
            {
              this.DOMdiv.style.transform = "rotateY(0deg)";
              this.flipped = false;
            }
            break;
          default:

            break;
        }
      }
      if(!this._getNextRandomNode(this.animationNode.getElementsByTagName('sequence')[0])) return;
    }

    var setNext = false;

    if(border && border[0] && border[0].getElementsByTagName('next'))
    {
      if(x2<0 && this.imageX < 0)
      {
        this.imageX = 0;
        setNext = true;
      }
      else if(x2 > 0 && this.imageX > this.screenW - this.imageW)
      {
        this.imageX = this.screenW - this.imageW;
        this.DOMdiv.style.left = parseInt(this.imageX) + "px";
        setNext = true;
      }
      else if(y2 < 0 && this.imageY < 0)
      {
        this.imageY = 0;
        setNext = true;
      }
      else if(y2 > 0 && this.imageY > this.screenH - this.imageH)
      {
        this.imageY = this.screenH - this.imageH;
        setNext = true;
      }
      else if(y2 > 0)
      {
        if(this._checkOverlapping())
        {
          if(this.imageY > this.imageH)
          {
            this.HTMLelement = this._checkOverlapping();
            this.imageY = Math.ceil(this.HTMLelement.getBoundingClientRect().top) - this.imageH;
            setNext = true;
          }
        }
      }
      else if(this.HTMLelement)
      {
        if(!this._checkOverlapping())
        {
          if(this.imageY + this.imageH > this.HTMLelement.getBoundingClientRect().top + 3 ||
             this.imageY + this.imageH < this.HTMLelement.getBoundingClientRect().top - 3)
          {
            this.HTMLelement = null;
          }
          else if(this.imageX < this.HTMLelement.getBoundingClientRect().left)
          {
            this.imageX = parseInt(this.imageX + 3);
            setNext = true;
          }
          else
          {
            this.imageX = parseInt(this.imageX - 3);
            setNext = true;
          }
          this.DOMdiv.style.left = parseInt(this.imageX) + "px";
        }
      }
      if(setNext)
      {
        if(!this._getNextRandomNode(border[0])) return;
      }
    }
    if(!setNext && gravity && gravity[0] && gravity[0].getElementsByTagName('next'))
    {
      if(this.imageY < this.screenH - this.imageH - 2)
      {
        if(this.HTMLelement == null)
        {
          setNext = true;
        }
        else
        {
          if(!this._checkOverlapping())
          {
            setNext = true;
            this.HTMLelement = null;
          }
        }

        if(setNext)
        {
          if(!this._getNextRandomNode(gravity[0])) return;
        }
      }
    }
    if(!setNext)
    {
      if(this.imageX < - this.imageW && x2 < 0 ||
        this.imageX > this.screenW && x2 > 0 ||
        this.imageY < - this.imageH && y1 < 0 ||
        this.imageY > this.screenH && y2 > 0)
      {
        setNext = true;
        if(!this.isChild) {
          this._spawnESheep();
        }
        return;
      }
    }

    setTimeout(
      this._nextESheepStep.bind(this),
      parseInt(del1) + parseInt((del2 - del1) * this.animationStep / steps)
    );
  }
  
  /*
   * Load Pet List from GitHub, so user can change it
   */
  _loadPetList(element)
  {
    fetch(DEFAULT_JSON,
    {
      credentials: 'same-origin',
      cache: "force-cache"
    }).then(response => {
      return response.json();
    }).then(json => {
      console.log(json);
      if(json.pets)
      {
        element.addEventListener("mouseup", e => {
          e.preventDefault();
          e.stopPropagation();
          
          var div = document.createElement("div");
          div.setAttribute("style", "position:absolute;left:0px;top:20px;width:183px;min-height:100px;background:linear-gradient(to bottom, #8080ff, #3030a1);color:yellow;");
          element.parentNode.appendChild(div);
          
          for(let k in json.pets)
          {
            var pet = document.createElement("b");
            pet.setAttribute("style", "cursor:pointer;display:block;");
            pet.appendChild(document.createTextNode(json.pets[k].folder));
            pet.addEventListener("click", ()=>{
              var x = new eSheep(this.userOptions);
              x.Start(ROOT_SITE+"/pets/" + json.pets[k].folder + "/animations.xml");
              this.remove();
            });
            div.appendChild(pet);
          }
          
          div.addEventListener("click", e => {element.parentNode.removeChild(div);});
        });
      }
    });
  }
};

Minified JavaScript Output
const VERSION="0.9.2.2",ACTIVATE_DEBUG=!1;var script_url=document.currentScript.getAttribute("src");const ROOT_SITE=window.location.origin+script_url.substring(0,script_url.lastIndexOf("/")+1)+"..",DEFAULT_XML=ROOT_SITE+"/pets/esheep64/animations.xml",DEFAULT_JSON=ROOT_SITE+"/pets/pets.json",ANIMATION_LIST=["bbunny","blue_sheep","esheep64","fox","green_sheep","gsheep-green","mimiko","negima","neko","orange_sheep","pingus","pink_sheep","purple_sheep","red_sheep","ssj-goku","yellow_sheep"],COLLISION_WITH=["div","hr"];class eSheep{constructor(e,t){this.userOptions=e||{allowPets:"none",allowPopup:"yes"},this.userOptions.allowPopup||(this.userOptions.allowPopup="yes"),this.userOptions.allowPets||(this.userOptions.allowPets="none"),this.animationFile=DEFAULT_XML,this.id=Date.now()+Math.random(),this.DOMdiv=document.createElement("div"),this.DOMdiv.setAttribute("id",this.id),this.DOMimg=document.createElement("img"),this.DOMinfo=document.createElement("div"),this.parser=new DOMParser,this.xmlDoc=null,this.prepareToDie=!1,this.isChild=null!=t,this.tilesX=1,this.tilesY=1,this.imageW=1,this.imageH=1,this.imageX=1,this.imageY=1,this.flipped=!1,this.dragging=!1,this.infobox=!1,this.animationId=0,this.animationStep=0,this.animationNode=null,this.sprite=new Image,this.HTMLelement=null,this.randS=100*Math.random(),this.screenW=window.innerWidth||document.documentElement.clientWidth||document.body.clientWidth,this.screenH=window.innerHeight||document.documentElement.clientHeight||document.body.clientHeight}Start(e){if(void 0!==e&&null!=e){var t=!1;if("random"==e)e=ANIMATION_LIST[Math.floor(Math.random()*ANIMATION_LIST.length)];else for(var i=["https://","http://","ftp://"],s=0;s<i.length;s++)if(0==e.indexOf(i[s])){t=!0;break}!1===t?this.animationFile=ROOT_SITE+"/pets/"+e+"/animations.xml":this.animationFile=e}var a=new XMLHttpRequest,n=this;a.open("GET",this.animationFile,!0),a.addEventListener("readystatechange",function(){4==this.readyState&&(200==this.status?n._parseXML(this.responseText):console.error("XXXXXML not available:"+this.statusText+"\n"+this.responseText))}),a.send(null)}remove(){this.prepareToDie=!0,this.DOMinfo.Hide(),setTimeout(()=>{this.DOMdiv=this.DOMimg=this.DOMinfo=null,document.getElementById(this.id).outerHTML=""},500)}_parseXML(e){this.xmlDoc=this.parser.parseFromString(e,"text/xml");var t=this.xmlDoc.getElementsByTagName("image")[0];this.tilesX=t.getElementsByTagName("tilesx")[0].textContent,this.tilesY=t.getElementsByTagName("tilesy")[0].textContent,this.sprite.addEventListener("load",()=>{ACTIVATE_DEBUG&&console.log("Sprite image loaded");var e="width:"+this.sprite.width+"px;height:"+this.sprite.height+"px;position:absolute;top:0px;left:0px;max-width: none;";this.DOMimg.setAttribute("style",e),this.DOMimg.addEventListener("dragstart",e=>(e.preventDefault(),!1)),this.imageW=this.sprite.width/this.tilesX,this.imageH=this.sprite.height/this.tilesY,e="width:"+this.imageW+"px;height:"+this.imageH+"px;position:fixed;top:"+this.imageY+"px;left:"+this.imageX+"px;transform:rotatey(0deg);cursor:move;z-index:2000;overflow:hidden;image-rendering: crisp-edges;",this.DOMdiv.setAttribute("style",e),this.DOMdiv.appendChild(this.DOMimg),this.isChild?this._spawnChild():this._spawnESheep()}),this.sprite.src="data:image/png;base64,"+t.getElementsByTagName("png")[0].textContent,this.DOMimg.setAttribute("src",this.sprite.src),this.DOMdiv.addEventListener("mousemove",e=>{if(!this.dragging&&1==e.buttons&&0==e.button){this.dragging=!0,this.HTMLelement=null;for(var t=this.xmlDoc.getElementsByTagName("animations")[0].getElementsByTagName("animation"),i=0;i<t.length;i++)if("drag"==t[i].getElementsByTagName("name")[0].textContent){this.animationId=t[i].getAttribute("id"),this.animationStep=0,this.animationNode=t[i];break}}}),document.body.addEventListener("mousemove",e=>{this.dragging&&(this.imageX=parseInt(e.clientX)-this.imageW/2,this.imageY=parseInt(e.clientY)-this.imageH/2,this.DOMdiv.style.left=this.imageX+"px",this.DOMdiv.style.top=this.imageY+"px",this.DOMinfo.style.left=parseInt(this.imageX+this.imageW/2)+"px",this.DOMinfo.style.top=this.imageY+"px")}),document.body.addEventListener("resize",()=>{this.screenW=window.innerWidth||document.documentElement.clientWidth||document.body.clientWidth,this.screenH=window.innerHeight||document.documentElement.clientHeight||document.body.clientHeight,this.imageY+this.imageH>this.screenH&&(this.imageY=this.screenH-this.imageH,this.DOMdiv.style.top=this.imageY+"px"),this.imageX+this.imageW>this.screenW&&(this.imageX=this.screenW-this.imageW,this.DOMdiv.style.left=this.imageX+"px")}),this.DOMdiv.addEventListener("contextmenu",e=>(e.preventDefault(),!1)),this.DOMdiv.addEventListener("mouseup",e=>{this.dragging?this.dragging=!1:this.infobox?(this.DOMinfo.Hide(),this.infobox=!1):"yes"===this.userOptions.allowPopup&&(this.DOMinfo.style.left=Math.min(this.screenW-this.imageW,Math.max(this.imageW,parseInt(this.imageX+this.imageW/2)))+"px",this.DOMinfo.style.top=parseInt(this.imageY)+"px",this.DOMinfo.Show(),this.infobox=!0)}),this.DOMinfo.addEventListener("mouseup",e=>{this.DOMinfo.Hide(),this.infobox=!1});var i="width:200px;height:100px;transform:translate(-50%, -50%) scale(0.1);position:fixed;top:100px;left:10px;display:none;border-width:2px;border-radius:5px;border-style:ridge;border-color:#0000ab;text-align:center;text-shadow: 1px 1px 3px #ffff88;box-shadow: 3px 3px 10px #888888;color:black;opacity:0.9;z-index:9999;overflow:auto;transition:transform 0.3s ease;background: linear-gradient(to bottom right, rgba(128,128,255,0.7), rgba(200,200,255,0.4));";this.DOMinfo.setAttribute("style",i);var s=this.xmlDoc.getElementsByTagName("header")[0],a=document.createElement("b").appendChild(document.createTextNode(s.getElementsByTagName("title")[0].textContent)),n=document.createElement("sup"),h=document.createElement("a"),o=document.createElement("p");n.appendChild(document.createTextNode("App v."+VERSION)),n.appendChild(document.createElement("br")),n.appendChild(document.createTextNode("Pet v."+s.getElementsByTagName("version")[0].textContent)),n.setAttribute("style","float:right;text-align:right;"),h.appendChild(document.createTextNode("\uD83C\uDFE0")),h.setAttribute("href","https://github.com/Adrianotiger/web-esheep"),h.setAttribute("target","_blank"),h.setAttribute("style","float:left"),o.appendChild(document.createTextNode(s.getElementsByTagName("info")[0].textContent)),o.setAttribute("style","font-size:"+(100-parseInt(s.getElementsByTagName("info")[0].textContent.length/10))+"%;"),this.DOMinfo.appendChild(n),this.DOMinfo.appendChild(h),"none"!==this.userOptions.allowPets&&((h=document.createElement("a")).appendChild(document.createTextNode("⚙")),h.setAttribute("href","javascript:;"),h.setAttribute("style","float:left"),this.DOMinfo.appendChild(h),setTimeout(()=>{this._loadPetList(h)},100)),this.DOMinfo.appendChild(a),this.DOMinfo.appendChild(document.createElement("br")),this.DOMinfo.appendChild(document.createElement("hr")),this.DOMinfo.appendChild(o),document.body.appendChild(this.DOMinfo),document.body.appendChild(this.DOMdiv),this.DOMinfo.Show=()=>{this.DOMinfo.style.display="block",this.DOMinfo.style.transform="translate(-50%, -100%) scale(1.0)"},this.DOMinfo.Hide=()=>{this.DOMinfo.style.transform="translate(-50%, -50%) scale(0.1)",setTimeout(()=>{this.DOMinfo.style.display="none"},300)}}_setPosition(e,t,i){this.DOMdiv&&(i?(this.imageX=parseInt(e),this.imageY=parseInt(t)):(this.imageX=parseInt(this.imageX)+parseInt(e),this.imageY=parseInt(this.imageY)+parseInt(t)),this.DOMdiv.style.left=this.imageX+"px",this.DOMdiv.style.top=this.imageY+"px")}_spawnESheep(){for(var e=this.xmlDoc.getElementsByTagName("spawns")[0].getElementsByTagName("spawn"),t=0,i=0;i<e.length;i++)t+=parseInt(e[0].getAttribute("probability"));var s=Math.random()*t;for(i=0,t=0;i<e.length;i++)if((t+=parseInt(e[i].getAttribute("probability")))>=s||i==e.length-1){this._setPosition(this._parseKeyWords(e[i].getElementsByTagName("x")[0].textContent),this._parseKeyWords(e[i].getElementsByTagName("y")[0].textContent),!0),ACTIVATE_DEBUG&&console.log("Spawn: "+this.imageX+", "+this.imageY),this.animationId=e[i].getElementsByTagName("next")[0].textContent,this.animationStep=0;for(var a=this.xmlDoc.getElementsByTagName("animations")[0],n=a.getElementsByTagName("animation"),h=0;h<n.length;h++)if(n[h].getAttribute("id")==this.animationId){this.animationNode=n[h];for(var a=this.xmlDoc.getElementsByTagName("childs")[0],n=a.getElementsByTagName("child"),o=0;o<n.length;o++)if(n[o].getAttribute("animationid")==this.animationId){ACTIVATE_DEBUG&&console.log("Child from Spawn");var r=new eSheep(null,!0);r.animationId=n[o].getElementsByTagName("next")[0].textContent;var m=n[o].getElementsByTagName("x")[0].textContent,l=n[o].getElementsByTagName("y")[0].textContent;r._setPosition(this._parseKeyWords(m),this._parseKeyWords(l),!0),r.Start(this.animationFile);break}break}break}this._nextESheepStep()}_spawnChild(){for(var e=this.xmlDoc.getElementsByTagName("animations")[0].getElementsByTagName("animation"),t=0;t<e.length;t++)if(e[t].getAttribute("id")==this.animationId){this.animationNode=e[t];break}this._nextESheepStep()}_parseKeyWords(value){value=(value=(value=(value=(value=(value=(value=(value=(value=(value=value.replace(/screenW/g,this.screenW)).replace(/screenH/g,this.screenH)).replace(/areaW/g,this.screenH)).replace(/areaH/g,this.screenH)).replace(/imageW/g,this.imageW)).replace(/imageH/g,this.imageH)).replace(/random/g,100*Math.random())).replace(/randS/g,this.randS)).replace(/imageX/g,this.imageX)).replace(/imageY/g,this.imageY);var ret=0;try{ret=eval(value)}catch(err){console.error("Unable to parse this position: \n'"+value+"'\n Error message: \n"+err.message)}return ret}_getNextRandomNode(e){var t=e.getElementsByTagName("next"),i=this.xmlDoc.getElementsByTagName("animations")[0],s=i.getElementsByTagName("animation"),a=0,n=!1;if(0==t.length)return this.isChild?(ACTIVATE_DEBUG&&console.log("Remove child"),document.body.removeChild(this.DOMinfo),document.body.removeChild(this.DOMdiv),delete this):this._spawnESheep(),!1;for(var h=0;h<t.length;h++)a+=parseInt(t[h].getAttribute("probability"));var o=Math.random()*a,r=0;for(h=0,a=0;h<t.length;h++)if((a+=parseInt(t[h].getAttribute("probability")))>=o){r=h;break}for(h=0;h<s.length;h++)if(s[h].getAttribute("id")==t[r].textContent){this.animationId=s[h].getAttribute("id"),this.animationStep=0,this.animationNode=s[h],n=!0;break}if(n){var i=this.xmlDoc.getElementsByTagName("childs")[0],s=i.getElementsByTagName("child");for(h=0;h<s.length;h++)if(s[h].getAttribute("animationid")==this.animationId){ACTIVATE_DEBUG&&console.log("Child from Animation");var m=new eSheep(null,!0);m.animationId=s[h].getElementsByTagName("next")[0].textContent;var l=s[h].getElementsByTagName("x")[0].textContent,g=s[h].getElementsByTagName("y")[0].textContent;m._setPosition(this._parseKeyWords(l),this._parseKeyWords(g),!0),m.Start(this.animationFile);break}}return n}_checkOverlapping(){var e,t=this.imageX,i=this.imageY+this.imageH,s=20;for(var a in this.HTMLelement&&(s=5),COLLISION_WITH)for(var n=document.body.getElementsByTagName(COLLISION_WITH[a]),h=0;h<n.length;h++)if(i>(e=n[h].getBoundingClientRect()).top-2&&i<e.top+s&&t>e.left&&t<e.right-this.imageW){var o=window.getComputedStyle(n[h]);if(""!=o.borderTopStyle&&"none"!=o.borderTopStyle&&"none"!=o.display)return n[h]}return!1}_getNodeValue(e,t,i){if(this.animationNode&&this.animationNode.getElementsByTagName(e)){if(!this.animationNode.getElementsByTagName(e)[0].getElementsByTagName(t)[0])return i;var s=this.animationNode.getElementsByTagName(e)[0].getElementsByTagName(t)[0].textContent;return this._parseKeyWords(s)}}_nextESheepStep(){if(!this.prepareToDie){var e,t=this._getNodeValue("start","x",0),i=this._getNodeValue("start","y",0),s=this._getNodeValue("start","offsety",0),a=this._getNodeValue("start","opacity",1),n=this._getNodeValue("start","interval",1e3),h=this._getNodeValue("end","x",0),o=this._getNodeValue("end","y",0),r=this._getNodeValue("end","offsety",0),m=this._getNodeValue("end","interval",1),l=this._getNodeValue("end","interval",1e3),g=this._parseKeyWords(this.animationNode.getElementsByTagName("sequence")[0].getAttribute("repeat")),d=this.animationNode.getElementsByTagName("sequence")[0].getAttribute("repeatfrom"),p=this.animationNode.getElementsByTagName("gravity"),$=this.animationNode.getElementsByTagName("border"),c=this.animationNode.getElementsByTagName("frame").length+(this.animationNode.getElementsByTagName("frame").length-d)*g;if(e=this.animationStep<this.animationNode.getElementsByTagName("frame").length?this.animationNode.getElementsByTagName("frame")[this.animationStep].textContent:0==d?this.animationNode.getElementsByTagName("frame")[this.animationStep%this.animationNode.getElementsByTagName("frame").length].textContent:this.animationNode.getElementsByTagName("frame")[parseInt(d)+parseInt((this.animationStep-d)%(this.animationNode.getElementsByTagName("frame").length-d))].textContent,this.DOMimg.style.left=-this.imageW*(e%this.tilesX)+"px",this.DOMimg.style.top=-this.imageH*parseInt(e/this.tilesX)+"px",this.dragging||this.infobox){this.animationStep++,setTimeout(this._nextESheepStep.bind(this),50);return}if(this.flipped&&(t=-t,h=-h),0==this.animationStep?this._setPosition(t,i,!1):this._setPosition(parseInt(t)+parseInt((h-t)*this.animationStep/c),parseInt(i)+parseInt((o-i)*this.animationStep/c),!1),this.animationStep++,!(this.animationStep>=c)||(this.animationNode.getElementsByTagName("action")[0]&&"flip"===this.animationNode.getElementsByTagName("action")[0].textContent&&("rotateY(0deg)"==this.DOMdiv.style.transform?(this.DOMdiv.style.transform="rotateY(180deg)",this.flipped=!0):(this.DOMdiv.style.transform="rotateY(0deg)",this.flipped=!1)),this._getNextRandomNode(this.animationNode.getElementsByTagName("sequence")[0]))){var f=!1;if(!($&&$[0]&&$[0].getElementsByTagName("next")&&(h<0&&this.imageX<0?(this.imageX=0,f=!0):h>0&&this.imageX>this.screenW-this.imageW?(this.imageX=this.screenW-this.imageW,this.DOMdiv.style.left=parseInt(this.imageX)+"px",f=!0):o<0&&this.imageY<0?(this.imageY=0,f=!0):o>0&&this.imageY>this.screenH-this.imageH?(this.imageY=this.screenH-this.imageH,f=!0):o>0?this._checkOverlapping()&&this.imageY>this.imageH&&(this.HTMLelement=this._checkOverlapping(),this.imageY=Math.ceil(this.HTMLelement.getBoundingClientRect().top)-this.imageH,f=!0):this.HTMLelement&&!this._checkOverlapping()&&(this.imageY+this.imageH>this.HTMLelement.getBoundingClientRect().top+3||this.imageY+this.imageH<this.HTMLelement.getBoundingClientRect().top-3?this.HTMLelement=null:this.imageX<this.HTMLelement.getBoundingClientRect().left?(this.imageX=parseInt(this.imageX+3),f=!0):(this.imageX=parseInt(this.imageX-3),f=!0),this.DOMdiv.style.left=parseInt(this.imageX)+"px"),f&&!this._getNextRandomNode($[0]))||!f&&p&&p[0]&&p[0].getElementsByTagName("next")&&this.imageY<this.screenH-this.imageH-2&&(null==this.HTMLelement?f=!0:this._checkOverlapping()||(f=!0,this.HTMLelement=null),f&&!this._getNextRandomNode(p[0])))){if(!f&&(this.imageX<-this.imageW&&h<0||this.imageX>this.screenW&&h>0||this.imageY<-this.imageH&&i<0||this.imageY>this.screenH&&o>0)){f=!0,this.isChild||this._spawnESheep();return}setTimeout(this._nextESheepStep.bind(this),parseInt(n)+parseInt((l-n)*this.animationStep/c))}}}}_loadPetList(e){fetch(DEFAULT_JSON,{credentials:"same-origin",cache:"force-cache"}).then(e=>e.json()).then(t=>{console.log(t),t.pets&&e.addEventListener("mouseup",i=>{i.preventDefault(),i.stopPropagation();var s=document.createElement("div");for(let a in s.setAttribute("style","position:absolute;left:0px;top:20px;width:183px;min-height:100px;background:linear-gradient(to bottom, #8080ff, #3030a1);color:yellow;"),e.parentNode.appendChild(s),t.pets){var n=document.createElement("b");n.setAttribute("style","cursor:pointer;display:block;"),n.appendChild(document.createTextNode(t.pets[a].folder)),n.addEventListener("click",()=>{new eSheep(this.userOptions).Start(ROOT_SITE+"/pets/"+t.pets[a].folder+"/animations.xml"),this.remove()}),s.appendChild(n)}s.addEventListener("click",t=>{e.parentNode.removeChild(s)})})})}}
JavaScript Minifier Tool Documentation
The API has changed, to see more please click here
To minify/compress your JavaScript, perform a POST request to

API https://www.toptal.com/developers/javascript-minifier/api/raw
with the input parameter set to the JavaScript you want to minify.

Hire World Class Talent with Toptal
Vue.js Developers
JavaScript Developers
Node.js Developers
jQuery Developers
Security Engineers
Shopify Developers
NFT Developers
Test Engineers
PrestaShop Developers
Software Developers
OpenCart Developers
Freelance Coders
Database Designers
Hive Developers
Umbraco Developers
Hire the top 3% of freelance talent
Join the Toptal Network
Copyright 2010 - 2024 Toptal, LLC

Privacy Policy
Website terms
By continuing to use this site you agree to our Cookie Policy Privacy Policy, and Terms of Use.

Got it
